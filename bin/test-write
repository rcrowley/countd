#!/usr/bin/env python

import socket
import struct
from time import sleep

class CountD(object):

	def __init__(self, hostname="localhost", port=48879):
		self.socket = socket.socket()
		self.socket.connect((hostname, port))

	def write(self, keyspace, key, increment):
		chars = list(keyspace)
		chars.extend("\0" * (256 - len(keyspace)))
		chars.extend(list(key))
		chars.extend("\0" * (256 - len(key)))

		# TODO Support more than 32-bits
		sign = -1 if 0 > increment else 0
		packet = struct.pack("<ll256c256c", increment, sign, *chars)

		self.socket.send(packet)
		return self.socket.recv(4096)

if "__main__" == __name__:
	countd = CountD()
	print(countd.write("OH HAI", "OH NOES", 47))
	print(countd.write("asdf", "qwerty", -9))
	sleep(2)
	print(countd.write("foo", "bar", 48879))
	print(countd.socket.send("fail"))
