#!/usr/bin/env python

import socket
import struct

class CountD(object):

    def __init__(self, hostname="localhost", port=48879):
        self.socket = socket.socket()
        self.socket.connect((hostname, port))

    def write(self, keyspace, key, increment):
        chars = list(keyspace)
        chars.extend("\0" * (256 - len(keyspace)))
        chars.extend(list(key))
        chars.extend("\0" * (256 - len(key)))

        packet = struct.pack("<q256c256c", long(increment), *chars)

        self.socket.send(packet)
        return self.socket.recv(4096)

if "__main__" == __name__:
    countd = CountD()

    # Test some successful writes
#    print(countd.write("OH HAI", "OH NOES", 47))
#    print(countd.write("asdf", "qwerty", -9))
#    from time import sleep
#    sleep(2)
#    print(countd.write("foo", "bar", 48879))

    # Test a bad write.
	#   FIXME This bad write causes all writes that follow to be
	#   stored corrupted.  The easy fix is to disconnect any
	#   misbehaving client.  I hope to do the better fix.
#    print(countd.socket.send("fail"))
#    print(countd.socket.recv(4096))

    # Test filling a commit log
#    for i in range((64 << 20) / 520):
#        print(countd.write("hooah", "hooah", 47))

    print(countd.write("hooah", "asdf", 47))
    print(countd.write("hooah", "qwerty", -9))
    print(countd.write("hooah", "foo", 12))
    print(countd.write("hooah", "bar", 4))
    print(countd.write("hooah", "baz", 82))
    print(countd.write("hooah", "bang", 82))
    print(countd.write("hooah", "pants", 25))
    print(countd.write("hooah", "foo", 1000))
    print(countd.write("hooah", "bang", 1000))
